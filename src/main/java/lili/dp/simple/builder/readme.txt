Bbuilder模式
1、抽象建造者（Builder）角色：给出一个抽象接口，以规范产品对象的各个组成
成分的建造。一般而言，此接口独立于应用程序的商业逻辑。
2、具体建造者（Concrete BUilder）角色：担任这个角色的是与应用程序紧密相关
的一些类，他们再应用程序调用下创建产品的实例。这个角色要完成的任务包括：
1）实现抽象建造者Builder所生命的接口，给出一步一步地完成建造产品实例的操作。
2）在建造过程完成后，提高产品的实例。
3、导演者（Director）角色：担任这个角色的类调用具体建造者角色以创建产品对象。
应当指出的是，导演者角色并没有产品类的具体知识，真正拥有产品类的具体知识的
是具体建造者角色。
4、产品角色（Product）：产品便是建造中的复杂对象。一般来说，一个系统中会有
多于一个的产品类，而且这些产品类并一定有共同的接口，而且完全可以是不相关联的
参考：
http://blog.csdn.net/luhouxiang/article/details/6528654

在以下情况下应当使用建造模式：
１、需要生成的产品对象有复杂的内部结构。
２、需要生成的产品对象的属性相互依赖。建造模式可以强制实行一种分步骤进行的建造过程。因此，如果产品对象的一个属性必须在另一个属性被赋值之后才可以被赋值，使用建造模式便是一个很好的设计思想。
３、在对象创建过程中会使用到系统中的其它一些对象，这些对象在产品对象的创建过程中不易得到。
同时，使用建造模式主要有以下的效果人：
１）建造模式的使用使得产品的内部表象可以独立地变化。使用建造模式可以使客户端不必知道产品内部组成的细节。
２）每一个Builder都相对独立，而与其它的Builder无关。
３）模式所建造的最终产品更易于控制

