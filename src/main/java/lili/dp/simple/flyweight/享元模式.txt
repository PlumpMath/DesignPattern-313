http://blog.csdn.net/hguisu/article/details/7535792

TODO 将UML画出来
享元模式：对象结构型模式运用共享技术有效的支持大量细粒度的对象。
使用共享物件，用来尽可能减少内存使用量以及分享咨询给尽可能多的相似物件；它适合用于当大量物件
只是重复因而导致无法令人接受的使用大量内存。
通常物件中的部分状态是可以分享。场景做法是把他们放在外部数据结构，当需要使用时再将他们
传递给享元。


适用性：（只读对象，和共享对象）
1、一个应用程序使用大量相同或者相似的对象，造成很大的存储开销。
2、对象的大部分状态都可以外部化，可以将这些外部状态传入对象中。
3、如果删除对象的外部状态，那么可以用相对较少的共享对象取代很多组对象
4、应用程序不依赖于对象标识。由于Flyweight对象可被共享，对于概念上明显有别的对象，
	标识测试将将返回真值。
5、使用享元模式需要维护一个存储享元对象的享元池，而这需要耗费资源，因此，应当在多次重复
	使用享元对象时才值得使用享元模式。

构建模式的组成
1、抽象享元类（Flyweight）
	描述一个接口，通过这个接口flyweight可以接受并作用于外部状态。
2、具体享元类（ConcreteFlyweight)
	实现Flyweight接口，并为内部状态（如果有的话）增加存储空间。ConcreteFlyweight对象必须是
	可共享的。它所存储的状态必须是内部的；即，
3、非共享具体享元类（UnsharedConcreteFlyweight）
4、享元工厂类（FlyweightFactory)
5、客户端（Client）维持一个对flyweight的引用。计算或存储一个（多个）flyweight的外部状态。

效果：
1）享元模式的优点在于它可以极大减少内存中对象的数量，使得相同对象或相似对象在内存中只保留一份。
2）享元模式的外部状态相对独立，而且不会影响其内部状态，从而使得享元对象可以在不同的环境中被共享。
享元模式的缺点：
1）使得系统更加复杂，需要分离出内部状态和外部状态，这使得程序的逻辑复杂化
2）为了使对象可以共享，享元模式需要将享元对象的状态外部化，而读取外部状态使得运行时间变长。

总结：
1）享元模式是一个考虑系统性能的设计模式，通过使用享元模式可以节约内存空间，提高系统的性能
2）享元模式的核心在于享元工厂类，享元工厂类的作用在于提供一个用于存储享元对象的享元池，
用户需要对象时，首先从享元池中获取，如果享元池不存在，则创建一个新的享元对象返回给用户，
并在享元池中保存该新增对象
3）享元模式以共享的方式高效地支持大量的细粒度对象，享元对象能做到共享的关键是区分内部状态
(internal state)和外部状态（external state）
	1.内部状态是存储在享元对象内部并且不会随环境改变而改变的状态，因此内部状态可以共享
	2.外部状态是随环境改变而改变的，不可以共享的状态。享元对象的外部状态必须由客户端保存
	并在享元对象被创建之后，在需要使用的时候再传入到享元对象内部，一个外部状态与另一个
	外部状态直接是相互独立的。











