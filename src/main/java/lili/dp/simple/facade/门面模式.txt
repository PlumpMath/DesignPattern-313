 参看链接：http://blog.csdn.net/hguisu/article/details/7533759
http://blog.csdn.net/hguisu/article/details/7533759

 GOF的描述是：为子系统中的一组接口提供一个统一的接口，Facade模式定义了一个更高层的接口
 使得子系统更加容易使用。

 Facade模式主要适用于以下几种情况:

1) 为一个复杂子系统提供一个简单接口时，由于子系统往往因为不断演化而变得越来越复杂，但这种变化不应该
影响到客户的调用，此时使用Facade模式对外提供一个访问的接口；此外，还可以提供多个Facade类以实现不同
子系统的定制。
2）客户与抽象类的实现部分之间存在着很大的依赖性。用Facade模式将这个子系统与客户以及其他子系统分离解耦
让客户通过Facade类来访问具体子系统，这样也能够保持各个子系统的独立性，即可重用。
3）构建一个层次结构的子系统时，使用Facade模式定义子系统中每层的入口点。如果子系统之间是相互依赖的，
你可以让他们仅通过Facade进行通讯，从而简化了他们之间的依赖关系。

门面构建模式组成：
1、外观角色Facade：是模式的核心，他被客户client角色调用，知道各个子系统的功能。同时根据客户角色
已有的需求预定了几种功能组合
2、子系统角色（Subsystem classes）：实现子系统的功能，并处理由Facade对象指派的任务。对子系统而言
facade和client角色是未知的，没有Facade的任何相关信息；即没有指向Facade的实例

3、客户角色（client）调用facade角色获得完成相应的功能。

效果

Facade模式有下面一些优点：


1）对客户屏蔽子系统组件，减少了客户处理的对象数目并使得子系统使用起来更加容易。
通过引入外观模式，客户代码将变得很简单，与之关联的对象也很少。
2）实现了子系统与客户之间的松耦合关系，这使得子系统的组件变化不会影响到调用它的客户类，
只需要调整外观类即可。
3）降低了大型软件系统中的编译依赖性，并简化了系统在不同平台之间的移植过程，
因为编译一个子系统一般不需要编译所有其他的子系统。一个子系统的修改对其他子系统没有任何影响，
而且子系统内部变化也不会影响到外观对象。
4）只是提供了一个访问子系统的统一入口，并不影响用户直接使用子系统类。

Facade模式的缺点
1） 不能很好地限制客户使用子系统类，如果对客户访问子系统类做太多的限制则减少了可变性和灵活性。
2） 在不引入抽象外观类的情况下，增加新的子系统可能需要修改外观类或客户端的源代码，违背了“开闭原则”。


一个系统有多个外观类：
        在外观模式中，通常只需要一个外观类，并且此外观类只有一个实例，换言之它是一个单例类。
        在很多情况下为了节约系统资源，一般将外观类设计为单例类。当然这并不意味着在整个系统里只能有一个外观类，
        在一个系统中可以设计多个外观类，每个外观类都负责和一些特定的子系统交互，向用户提供相应的业务功能。
不要试图通过外观类为子系统增加新行为：
       不要通过继承一个外观类在子系统中加入新的行为，这种做法是错误的。
       外观模式的用意是为子系统提供一个集中化和简化的沟通渠道，而不是向子系统加入新的行为，
       新的行为的增加应该通过修改原有子系统类或增加新的子系统类来实现，不能通过外观类来实现。
外观模式与迪米特法则：
       外观模式创造出一个外观对象，将客户端所涉及的属于一个子系统的协作伙伴的数量减到最少，
       使得客户端与子系统内部的对象的相互作用被外观对象所取代。外观类充当了客户类与子系统类之间的“第三者”，
       降低了客户类与子系统类之间的耦合度，外观模式就是实现代码重构以便达到“迪米特法则”要求的一个强有力的武器。
抽象外观类的引入：
外观模式最大的缺点在于违背了“开闭原则”，
当增加新的子系统或者移除子系统时需要修改外观类，可以通过引入抽象外观类在一定程度上解决该问题，
客户端针对抽象外观类进行编程。对于新的业务需求，不修改原有外观类，而对应增加一个新的具体外观类，
由新的具体外观类来关联新的子系统对象，同时通过修改配置文件来达到不修改源代码并更换外观类的目的。
UML: